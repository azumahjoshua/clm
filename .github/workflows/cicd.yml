name: Build, Push to ECR Public, and Deploy

on:
  push:
    branches: [main]
    paths:
      - 'back-end/**'
      - 'front-end/**'
      - '.github/workflows/cicd.yml'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws
  REPO_RETENTION_DAYS: 30
  DB_PORT: 5432
  DB_CONNECTION: pgsql
  COMPOSE_PROJECT_NAME: clm-prod

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          role-session-name: github-actions-${{ github.run_id }}

      - name: Login to ECR Public
        run: |
          aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Clean up old Docker images
        run: |
          RETENTION_DATE=$(date -d "-${REPO_RETENTION_DAYS} days" +%Y-%m-%dT%H:%M:%SZ)
          for repo in laravel-backend nextjs-frontend; do
            aws ecr-public batch-delete-image \
              --repository-name $repo \
              --region ${{ env.AWS_REGION }} \
              --image-ids "$(aws ecr-public describe-images \
                --repository-name $repo \
                --region ${{ env.AWS_REGION }} \
                --query "imageDetails[?imagePushedAt<'$RETENTION_DATE'].imageDigest" \
                --output json | jq -r 'map({imageDigest: .})')" || true
          done

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./back-end
          file: ./back-end/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_PUBLIC_ALIAS }}/laravel-backend:latest
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_PUBLIC_ALIAS }}/laravel-backend:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./front-end
          file: ./front-end/Dockerfile
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=https://${{ secrets.ALB_DNS }}/api
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_PUBLIC_ALIAS }}/nextjs-frontend:latest
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_PUBLIC_ALIAS }}/nextjs-frontend:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          role-session-name: github-actions-${{ github.run_id }}

      - name: Prepare deployment files
        run: |
          # Create backend .env file
          mkdir -p back-end
          cp back-end/env.example back-end/.env
          sed -i "s/APP_ENV=.*/APP_ENV=production/" back-end/.env
          sed -i "s/APP_DEBUG=.*/APP_DEBUG=false/" back-end/.env
          sed -i "s|APP_URL=.*|APP_URL=https://${{ secrets.ALB_DNS }}|" back-end/.env
          sed -i "s/DB_CONNECTION=.*/DB_CONNECTION=${{ env.DB_CONNECTION }}/" back-end/.env
          sed -i "s/DB_HOST=.*/DB_HOST=${{ secrets.DB_HOST }}/" back-end/.env
          sed -i "s/DB_PORT=.*/DB_PORT=${{ env.DB_PORT }}/" back-end/.env
          sed -i "s/DB_DATABASE=.*/DB_DATABASE=${{ secrets.DB_DATABASE }}/" back-end/.env
          sed -i "s/DB_USERNAME=.*/DB_USERNAME=${{ secrets.DB_USERNAME }}/" back-end/.env
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" back-end/.env
          
          # Create frontend .env file if needed
          mkdir -p front-end
          if [ -f "front-end/env.example" ]; then
            cp front-end/env.example front-end/.env
            sed -i "s|NEXT_PUBLIC_API_URL=.*|NEXT_PUBLIC_API_URL=https://${{ secrets.ALB_DNS }}/api|" front-end/.env
          fi

          # Prepare docker-compose.yml
          sed \
            -e "s/\${ECR_PUBLIC_ALIAS}/${{ secrets.ECR_PUBLIC_ALIAS }}/g" \
            -e "s/\${TAG}/${{ github.sha }}/g" \
            -e "s/\${ALB_DNS}/${{ secrets.ALB_DNS }}/g" \
            docker-compose.prod.yml > docker-compose.yml

          # Copy deploy script
          cp scripts/deploy-prod.sh .

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CLM_KEY_JOSHUA }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.JUMP_HOST }} >> ~/.ssh/known_hosts

      - name: Copy deployment files
        run: |
          scp -o StrictHostKeyChecking=no \
            -o ProxyCommand="ssh -W %h:%p ${{ secrets.SSH_USER }}@${{ secrets.JUMP_HOST }}" \
            docker-compose.yml \
            back-end/.env \
            front-end/.env \
            deploy-prod.sh \
            ${{ secrets.SSH_USER }}@${{ secrets.PRIVATE_HOST }}:/home/ubuntu/app/

      - name: Make deploy script executable
        run: |
          ssh -o StrictHostKeyChecking=no \
            -J ${{ secrets.SSH_USER }}@${{ secrets.JUMP_HOST }} \
            ${{ secrets.SSH_USER }}@${{ secrets.PRIVATE_HOST }} \
            "chmod +x /home/ubuntu/app/deploy-prod.sh"

      - name: Run deployment
        run: |
          ssh -o StrictHostKeyChecking=no \
            -J ${{ secrets.SSH_USER }}@${{ secrets.JUMP_HOST }} \
            ${{ secrets.SSH_USER }}@${{ secrets.PRIVATE_HOST }} \
            "cd /home/ubuntu/app && ./deploy-prod.sh"