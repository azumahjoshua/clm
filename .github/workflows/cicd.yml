name: Build and Push to ECR Public

on:
  push:
    branches: [main]
    paths:
      - 'back-end/**'
      - 'front-end/**'
      - '.github/workflows/cicd.yml'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws
  REPO_RETENTION_DAYS: 30

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          role-session-name: github-actions-${{ github.run_id }}

      - name: Verify AWS credentials
        run: |
          echo "AWS caller identity:"
          aws sts get-caller-identity
          echo "ECR Public repositories:"
          aws ecr-public describe-repositories --region ${{ env.AWS_REGION }}

      - name: Login to ECR Public
        run: |
          echo "Logging in to ECR Public..."
          aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Clean up old Docker artifacts from ECR
        shell: bash
        run: |
          echo "Listing all public repositories..."
          aws ecr-public describe-repositories --region ${{ env.AWS_REGION }}

          RETENTION_DATE=$(date -d "-${REPO_RETENTION_DAYS} days" +%Y-%m-%dT%H:%M:%SZ)

          for repo in laravel-backend nextjs-frontend; do
            echo "Cleaning up old images in $repo..."
            digests=$(aws ecr-public describe-images \
              --repository-name $repo \
              --region ${{ env.AWS_REGION }} \
              --query "imageDetails[?imagePushedAt<'$RETENTION_DATE'].imageDigest" \
              --output text)

            for digest in $digests; do
              echo "Deleting image with digest: $digest"
              aws ecr-public batch-delete-image \
                --repository-name $repo \
                --region ${{ env.AWS_REGION }} \
                --image-ids imageDigest=$digest || true
            done
          done

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./back-end
          file: ./back-end/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_PUBLIC_ALIAS }}/laravel-backend:latest
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_PUBLIC_ALIAS }}/laravel-backend:${{ github.sha }}
          platforms: linux/amd64

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./front-end
          file: ./front-end/Dockerfile
          push: true
          build-args: |
            SESSION_PASSWORD=${{ secrets.SESSION_PASSWORD }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_PUBLIC_ALIAS }}/nextjs-frontend:latest
            ${{ env.ECR_REGISTRY }}/${{ secrets.ECR_PUBLIC_ALIAS }}/nextjs-frontend:${{ github.sha }}
          platforms: linux/amd64
  
  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          role-session-name: github-actions-${{ github.run_id }}
          audience: sts.amazonaws.com
      
      - name: Verify AWS access
        run: aws sts get-caller-identity

      - name: Setup SSH key and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CLM_KEY_JOSHUA }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.JUMP_HOST }} >> ~/.ssh/known_hosts

      - name: Start SSH Agent and add key
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Test SSH connection via Jump Host
        run: |
          ssh -o StrictHostKeyChecking=no -A \
            -J ${{ secrets.SSH_USER }}@${{ secrets.JUMP_HOST }} \
            ${{ secrets.SSH_USER }}@${{ secrets.PRIVATE_HOST }} "echo 'Connected to private EC2 via jump host!'"